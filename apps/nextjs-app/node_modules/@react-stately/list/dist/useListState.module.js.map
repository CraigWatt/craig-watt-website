{"mappings":"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","sources":["packages/@react-stately/list/src/useListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionStateBase, Key, LayoutDelegate, Node} from '@react-types/shared';\nimport {ListCollection} from './ListCollection';\nimport {MultipleSelectionStateProps, SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {useCallback, useEffect, useMemo, useRef} from 'react';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface ListProps<T> extends CollectionStateBase<T>, MultipleSelectionStateProps {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean,\n  /**\n   * A delegate object that provides layout information for items in the collection.\n   * This can be used to override the behavior of shift selection.\n   */\n  layoutDelegate?: LayoutDelegate\n}\n\nexport interface ListState<T> {\n  /** A collection of items in the list. */\n  collection: Collection<Node<T>>,\n\n  /** A set of items that are disabled. */\n  disabledKeys: Set<Key>,\n\n  /** A selection manager to read and update multiple selection state. */\n  selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for list-like components. Handles building a collection\n * of items from props, and manages multiple selection state.\n */\nexport function useListState<T extends object>(props: ListProps<T>): ListState<T>  {\n  let {filter, layoutDelegate} = props;\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let factory = useCallback(nodes => filter ? new ListCollection(filter(nodes)) : new ListCollection(nodes as Iterable<Node<T>>), [filter]);\n  let context = useMemo(() => ({suppressTextValueWarning: props.suppressTextValueWarning}), [props.suppressTextValueWarning]);\n\n  let collection = useCollection(props, factory, context);\n\n  let selectionManager = useMemo(() =>\n    new SelectionManager(collection, selectionState, {layoutDelegate})\n    , [collection, selectionState, layoutDelegate]\n  );\n\n  // Reset focused key if that item is deleted from the collection.\n  const cachedCollection = useRef<Collection<Node<T>> | null>(null);\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey) && cachedCollection.current) {\n      const startItem = cachedCollection.current.getItem(selectionState.focusedKey);\n      const cachedItemNodes = [...cachedCollection.current.getKeys()].map(\n        key => {\n          const itemNode = cachedCollection.current!.getItem(key);\n          return itemNode?.type === 'item' ? itemNode : null;\n        }\n      ).filter(node => node !== null);\n      const itemNodes = [...collection.getKeys()].map(\n        key => {\n          const itemNode = collection.getItem(key);\n          return itemNode?.type === 'item' ? itemNode : null;\n        }\n      ).filter(node => node !== null);\n      const diff: number = (cachedItemNodes?.length ?? 0) - (itemNodes?.length ?? 0);\n      let index = Math.min(\n        (\n          diff > 1 ?\n          Math.max((startItem?.index ?? 0) - diff + 1, 0) :\n          startItem?.index ?? 0\n        ),\n        (itemNodes?.length ?? 0) - 1);\n      let newNode: Node<T> | null = null;\n      let isReverseSearching = false;\n      while (index >= 0) {\n        if (!selectionManager.isDisabled(itemNodes[index].key)) {\n          newNode = itemNodes[index];\n          break;\n        }\n        // Find next, not disabled item.\n        if (index < itemNodes.length - 1 && !isReverseSearching) {\n          index++;\n        // Otherwise, find previous, not disabled item.\n        } else {\n          isReverseSearching = true;\n          if (index > (startItem?.index ?? 0)) {\n            index = (startItem?.index ?? 0);\n          }\n          index--;\n        }\n      }\n      selectionState.setFocusedKey(newNode ? newNode.key : null);\n    }\n    cachedCollection.current = collection;\n  }, [collection, selectionManager, selectionState, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager\n  };\n}\n"],"names":[],"version":3,"file":"useListState.module.js.map"}