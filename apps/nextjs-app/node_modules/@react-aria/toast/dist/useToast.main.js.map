{"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;;;;;CAUC;;;;AAkCM,SAAS,0CAAY,KAAwB,EAAE,KAAoB,EAAE,GAAuC;IACjH,IAAI,OACF,GAAG,SACH,KAAK,WACL,OAAO,aACP,SAAS,EACV,GAAG,MAAM,KAAK;IAEf,CAAA,GAAA,sBAAQ,EAAE;QACR,IAAI,SAAS,QAAQ,WAAW,MAC9B;QAGF,MAAM,KAAK,CAAC;QACZ,OAAO;YACL,MAAM,KAAK;QACb;IACF,GAAG;QAAC;QAAO;KAAQ;IAEnB,IAAI,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,sCAAI,EAAE,QAAQ,CAAC;IAC/C,CAAA,GAAA,sBAAQ,EAAE;QACR,IAAI,cAAc,cAAc,cAAc,UAC5C,aAAa;IAEjB,GAAG;QAAC;KAAU;IAEd,IAAI,UAAU,CAAA,GAAA,2BAAI;IAClB,IAAI,gBAAgB,CAAA,GAAA,+BAAQ;IAC5B,IAAI,kBAAkB,CAAA,GAAA,gDAA0B,EAAE,CAAA,GAAA,mDAAW,GAAG;IAEhE,OAAO;QACL,YAAY;YACV,MAAM;YACN,cAAc;YACd,cAAc,KAAK,CAAC,aAAa;YACjC,mBAAmB,KAAK,CAAC,kBAAkB,IAAI;YAC/C,oBAAoB,KAAK,CAAC,mBAAmB,IAAI;YACjD,gBAAgB,KAAK,CAAC,eAAe;YACrC,yEAAyE;YACzE,eAAe,cAAc,YAAY,SAAS;YAClD,UAAU;QACZ;QACA,cAAc;YACZ,MAAM;YACN,eAAe;YACf,OAAO;gBACL,YAAY,aAAa,cAAc,OAAO,YAAY;YAC5D;QACF;QACA,YAAY;YACV,IAAI;QACN;QACA,kBAAkB;YAChB,IAAI;QACN;QACA,kBAAkB;YAChB,cAAc,gBAAgB,MAAM,CAAC;YACrC,SAAS,IAAM,MAAM,KAAK,CAAC;QAC7B;IACF;AACF","sources":["packages/@react-aria/toast/src/useToast.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaLabelingProps, DOMAttributes, FocusableElement, RefObject} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {QueuedToast, ToastState} from '@react-stately/toast';\nimport React, {useEffect} from 'react';\nimport {useId, useSlotId} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface AriaToastProps<T> extends AriaLabelingProps {\n  /** The toast object. */\n  toast: QueuedToast<T>\n}\n\nexport interface ToastAria {\n  /** Props for the toast container, non-modal dialog element. */\n  toastProps: DOMAttributes,\n  /** Props for the toast content alert message. */\n  contentProps: DOMAttributes,\n  /** Props for the toast title element. */\n  titleProps: DOMAttributes,\n  /** Props for the toast description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the toast close button. */\n  closeButtonProps: AriaButtonProps\n}\n\n/**\n * Provides the behavior and accessibility implementation for a toast component.\n * Toasts display brief, temporary notifications of actions, errors, or other events in an application.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function useToast<T>(props: AriaToastProps<T>, state: ToastState<T>, ref: RefObject<FocusableElement | null>): ToastAria {\n  let {\n    key,\n    timer,\n    timeout,\n    animation\n  } = props.toast;\n\n  useEffect(() => {\n    if (timer == null || timeout == null) {\n      return;\n    }\n\n    timer.reset(timeout);\n    return () => {\n      timer.pause();\n    };\n  }, [timer, timeout]);\n\n  let [isEntered, setIsEntered] = React.useState(false);\n  useEffect(() => {\n    if (animation === 'entering' || animation === 'queued') {\n      setIsEntered(true);\n    }\n  }, [animation]);\n\n  let titleId = useId();\n  let descriptionId = useSlotId();\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/toast');\n\n  return {\n    toastProps: {\n      role: 'alertdialog',\n      'aria-modal': 'false',\n      'aria-label': props['aria-label'],\n      'aria-labelledby': props['aria-labelledby'] || titleId,\n      'aria-describedby': props['aria-describedby'] || descriptionId,\n      'aria-details': props['aria-details'],\n      // Hide toasts that are animating out so VoiceOver doesn't announce them.\n      'aria-hidden': animation === 'exiting' ? 'true' : undefined,\n      tabIndex: 0\n    },\n    contentProps: {\n      role: 'alert',\n      'aria-atomic': 'true',\n      style: {\n        visibility: isEntered || animation === null ? 'visible' : 'hidden'\n      }\n    },\n    titleProps: {\n      id: titleId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    closeButtonProps: {\n      'aria-label': stringFormatter.format('close'),\n      onPress: () => state.close(key)\n    }\n  };\n}\n"],"names":[],"version":3,"file":"useToast.main.js.map"}