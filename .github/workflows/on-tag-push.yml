# .github/workflows/on-tag-push.yml
name: 🐳 Build, Publish & Deploy

on:
  push:
    tags:
      - 'v*' # only run on tag pushes like "v0.8.3"

permissions:
  id-token: write # for OIDC-based assume-role
  contents: read
  packages: write # for GHCR

env:
  AWS_REGION: eu-west-2
  ECR_REGISTRY: 275578070934.dkr.ecr.eu-west-2.amazonaws.com
  ECR_REPOSITORY: craig-watt-website

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.ref_name }}

    steps:
      - name: 🔄 Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.BOOTSTRAP_GHA_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🚀 Upgrade npm
        run: npm install -g npm@11

      - name: 📦 Install dependencies
        run: npm ci

      # ─── Make sure Next.js can see your server-only secrets ───
      - name: ✏️ Write apps/nextjs-app/.env.production
        run: |
          cat > apps/nextjs-app/.env.production <<EOF
          MAILERSEND_API_KEY=${{ secrets.MAILERSEND_API_KEY }}
          CONTACT_EMAIL_TO=${{ secrets.CONTACT_EMAIL_TO }}
          CONTACT_EMAIL_FROM=${{ secrets.CONTACT_EMAIL_FROM }}
          NEXT_PUBLIC_RECAPTCHA_SITE_KEY=${{ secrets.NEXT_PUBLIC_RECAPTCHA_SITE_KEY }}
          RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}
          EOF

      - name: 🚧 Build production site
        run: npx nx build nextjs-app --configuration=production

      # ─── Log in to both registries ───
      - name: 🔑 Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔑 Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # ─── Build & Push to both GHCR and ECR ───
      - name: 🏷️ Build & Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: apps/nextjs-app/Dockerfile
          push: true
          build-args: |
            MAILERSEND_API_KEY=${{ secrets.MAILERSEND_API_KEY }}
            CONTACT_EMAIL_TO=${{ secrets.CONTACT_EMAIL_TO }}
            CONTACT_EMAIL_FROM=${{ secrets.CONTACT_EMAIL_FROM }}
            NEXT_PUBLIC_RECAPTCHA_SITE_KEY=${{ secrets.NEXT_PUBLIC_RECAPTCHA_SITE_KEY }}
            RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}
          tags: |
            ghcr.io/craigwatt/craig-watt-website:${{ github.ref_name }}
            ghcr.io/craigwatt/craig-watt-website:latest
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.ref_name }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  deploy-infra:
    name: Deploy Infra via Terraform
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: 🔄 Checkout infra code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.BOOTSTRAP_GHA_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: infra
        run: |
          terraform init --reconfigure \
            -backend-config="bucket=craig-watt-tfstate" \
            -backend-config="key=prod/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=craig-watt-lock-table"

      - name: Terraform Apply
        working-directory: infra
        run: |
          terraform apply -auto-approve \
            -var="image_tag=${{ needs.build-and-push.outputs.image_tag }}" \
            -var="ecs_execution_role_arn=${{ secrets.ECS_EXECUTION_ROLE_ARN }}" \
            -var="ecs_task_role_arn=${{ secrets.ECS_TASK_ROLE_ARN }}"
